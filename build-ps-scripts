#!/bin/bash

# This will generate a file to be executed remotely on however many servers you provision.

administrator_password="Change@me-123!!"

for index in $(seq -f "%02g" 1 $1)
do

# Add your Powershell script below, commands below are just expamples.

cat << EOF > ps-scripts/w$index-script1.ps1
# Set Time Zone
cscript //h:cscript //s //nologo
tzutil /s "Pacific Standard Time"

# Remove Current License Key
#slmgr /upk -confirm:\$False

# Update Local Administrator Password  and set to never expire
\$NewPassword = ConvertTo-SecureString $administrator_password -AsPlainText -Force
Set-LocalUser -Name Administrator -Password \$NewPassword
Set-LocalUser -Name Administrator -PasswordNeverExpires 1

# Disable Services and Delete Equinix Scheduled Tasks
sc.exe config "cloudbase-init" start=disabled
sc.exe config "Spooler" start=disabled
Get-ScheduledTask -TaskName "Packet-Config-Network"
Unregister-ScheduledTask -TaskName "Packet-Config-Network" -Confirm:\$false

# Remove Equinix Apps
\$MyApp = Get-WmiObject -Class Win32_Product | Where-Object{\$_.Name -eq "Cloudbase-Init 1.1.3.dev10"}
\$myapp.uninstall()
\$MyApp = Get-WmiObject -Class Win32_Product | Where-Object{\$_.Name -eq "Pensando Ionic Driver"}
\$myapp.uninstall()

EOF

# Another script if needed, commands below are just examples.

cat << EOF > ps-scripts/w$index-script2.ps1

# Convert from Windows Server 2019 from Standard to Data Center
Dism /online /Set-Edition:ServerDatacenter /AcceptEula /ProductKey:WMDGN-G9PQG-XVVXX-R3X43-63DFG

# Remove Local User Accounts and Delete Profiles
Remove-LocalUser -Name "Admin"
Remove-LocalUser -Name "cloudbase-init"


# Disable Allow the computer to turn off this device to save power
\$NICs = Get-WmiObject Win32_NetworkAdapter -filter "AdapterTypeID = '0' AND PhysicalAdapter = 'true' AND NOT Description LIKE '%wireless%' AND NOT Description LIKE '%virtual%' AND NOT Description LIKE '%WiFi%' AND NOT Description LIKE '%Bluetooth%'"
Foreach (\$NIC in \$NICs)
{
    \$powerMgmt = Get-WmiObject MSPower_DeviceEnable -Namespace root\wmi | where {\$_.InstanceName -match [regex]::Escape(\$nic.PNPDeviceID)}
    If (\$powerMgmt.Enable -eq \$True)
    {
         \$powerMgmt.Enable = \$False
         \$powerMgmt.psbase.Put()
    }
}

EOF

done
